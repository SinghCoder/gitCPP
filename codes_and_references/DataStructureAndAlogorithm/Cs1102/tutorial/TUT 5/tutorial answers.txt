q1a  public static void reverseArray(int[]array,int start, int end){
    
    //start is the beginning index to switch with the end index
    //start==end base case for odd size, start>end for even size
    
    if(start==end||start>end){return;}
    else{
      int temp =array[start];
      array[start]=array[end];
      array[end]=temp;
      reverseArray(array,start+1,end-1);
      }
  }
}

1b   public static boolean checkP(String x, int start, int end){
    
    //start - start index  end - end index
    
    if(start==end||start>end){return true;}
    else{
      if(checkP(x,start+1,end-1)==false|| x.charAt(start)!=x.charAt(end)){
        return false;
      }
      else {
        return true;
      }
    }
}

1c  public static int findSmallest(int[]array,int start, int end){
    
    if(start==end){return array[end];}
    else{
      if(array[start]<findSmallest(array,start+1,end)){
        return array[start];        
      }
      else{
        return findSmallest(array, start+1,end);
      }
    }
  }
}
         

1d recursion is easier to implement but take up memory spaces

2a 6 times


    